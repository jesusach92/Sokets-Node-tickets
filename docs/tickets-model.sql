-- MySQL Script generated by MySQL Workbench
-- Tue Jul 19 12:52:36 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema ticketsdb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `ticketsdb` ;

-- -----------------------------------------------------
-- Schema ticketsdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ticketsdb` DEFAULT CHARACTER SET utf8 ;
USE `ticketsdb` ;

-- -----------------------------------------------------
-- Table `ticketsdb`.`area`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`area` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`area` (
  `idArea` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nameArea` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`idArea`),
  UNIQUE INDEX `nameArea_UNIQUE` (`nameArea` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`roles` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`roles` (
  `idRole` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nameRole` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`idRole`),
  UNIQUE INDEX `idRole_UNIQUE` (`idRole` ASC) VISIBLE,
  UNIQUE INDEX `nameRole_UNIQUE` (`nameRole` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`usertypes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`usertypes` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`usertypes` (
  `idUserType` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userType` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`idUserType`),
  UNIQUE INDEX `idUserType_UNIQUE` (`idUserType` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`users` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`users` (
  `idUser` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `fkUserType` INT UNSIGNED NOT NULL,
  `email` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`idUser`),
  UNIQUE INDEX `idUser_UNIQUE` (`idUser` ASC) VISIBLE,
  UNIQUE INDEX `email` (`email` ASC) VISIBLE,
  INDEX `fkuserTypesidx` (`fkUserType` ASC) VISIBLE,
  CONSTRAINT `fkuserTypes`
    FOREIGN KEY (`fkUserType`)
    REFERENCES `ticketsdb`.`usertypes` (`idUserType`))
ENGINE = InnoDB
AUTO_INCREMENT = 16
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`employes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`employes` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`employes` (
  `idemploye` INT NOT NULL AUTO_INCREMENT,
  `userName` VARCHAR(15) NOT NULL,
  `nameEmploye` VARCHAR(50) NOT NULL,
  `emailEmploye` VARCHAR(40) NOT NULL,
  `numberEmploye` VARCHAR(10) NOT NULL,
  `passwordEmploye` VARCHAR(70) NOT NULL,
  `fkUser` INT UNSIGNED NOT NULL,
  `fkRole` INT UNSIGNED NOT NULL,
  `jobTitle` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`idemploye`),
  UNIQUE INDEX `userName_UNIQUE` (`userName` ASC) VISIBLE,
  UNIQUE INDEX `nameEmploye_UNIQUE` (`nameEmploye` ASC) VISIBLE,
  UNIQUE INDEX `numberEmploye_UNIQUE` (`numberEmploye` ASC) VISIBLE,
  INDEX `fk_employes_users1_idx` (`fkUser` ASC) VISIBLE,
  INDEX `fk_employes_roles1_idx` (`fkRole` ASC) VISIBLE,
  CONSTRAINT `fk_employes_roles1`
    FOREIGN KEY (`fkRole`)
    REFERENCES `ticketsdb`.`roles` (`idRole`),
  CONSTRAINT `fk_employes_users1`
    FOREIGN KEY (`fkUser`)
    REFERENCES `ticketsdb`.`users` (`idUser`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`agents`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`agents` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`agents` (
  `idAgent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `rangeAgent` INT NOT NULL,
  `fkEmploye` INT NOT NULL,
  `fkArea` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idAgent`),
  INDEX `fk_agents_employes1_idx` (`fkEmploye` ASC) VISIBLE,
  INDEX `fk_agents_area1_idx` (`fkArea` ASC) VISIBLE,
  CONSTRAINT `fk_agents_area1`
    FOREIGN KEY (`fkArea`)
    REFERENCES `ticketsdb`.`area` (`idArea`),
  CONSTRAINT `fk_agents_employes1`
    FOREIGN KEY (`fkEmploye`)
    REFERENCES `ticketsdb`.`employes` (`idemploye`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`basesolution`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`basesolution` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`basesolution` (
  `idSolution` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `problemTitle` VARCHAR(50) NOT NULL,
  `solution` TEXT NOT NULL,
  `dateInitial` TIMESTAMP(3) NOT NULL,
  `dateUpdate` TIMESTAMP(3) NOT NULL,
  `fkAgent` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idSolution`),
  UNIQUE INDEX `problemTitle_UNIQUE` (`problemTitle` ASC) VISIBLE,
  INDEX `fk_baseSolution_agents1_idx` (`fkAgent` ASC) VISIBLE,
  CONSTRAINT `fk_baseSolution_agents1`
    FOREIGN KEY (`fkAgent`)
    REFERENCES `ticketsdb`.`agents` (`idAgent`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`category` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`category` (
  `idCategory` INT NOT NULL AUTO_INCREMENT,
  `nameCategory` VARCHAR(50) NOT NULL,
  `Description` TEXT NOT NULL,
  PRIMARY KEY (`idCategory`),
  UNIQUE INDEX `nameCategory_UNIQUE` (`nameCategory` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`computers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`computers` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`computers` (
  `idComputer` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `serialNumber` VARCHAR(20) NOT NULL,
  `fkEmploye` INT NOT NULL,
  `description` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`idComputer`),
  INDEX `fk_computers_employes1_idx` (`fkEmploye` ASC) VISIBLE,
  CONSTRAINT `fk_computers_employes1`
    FOREIGN KEY (`fkEmploye`)
    REFERENCES `ticketsdb`.`employes` (`idemploye`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`consumers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`consumers` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`consumers` (
  `idConsumer` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nameConsumer` VARCHAR(50) NOT NULL,
  `emailConsumer` VARCHAR(40) NOT NULL,
  `fkUser` INT UNSIGNED NOT NULL,
  `passwordConsumer` VARCHAR(70) NOT NULL,
  PRIMARY KEY (`idConsumer`),
  UNIQUE INDEX `idConsumer_UNIQUE` (`idConsumer` ASC) VISIBLE,
  UNIQUE INDEX `nameConsumer_UNIQUE` (`nameConsumer` ASC) VISIBLE,
  UNIQUE INDEX `emailConsumer_UNIQUE` (`emailConsumer` ASC) VISIBLE,
  INDEX `fk_consumers_users1_idx` (`fkUser` ASC) VISIBLE,
  CONSTRAINT `fk_consumers_users1`
    FOREIGN KEY (`fkUser`)
    REFERENCES `ticketsdb`.`users` (`idUser`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`phones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`phones` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`phones` (
  `idphone` INT NOT NULL AUTO_INCREMENT,
  `numberPhone` VARCHAR(30) NOT NULL,
  `typeNumber` ENUM('Fijo', 'Movil') NOT NULL,
  `fkUSer` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idphone`),
  UNIQUE INDEX `numberPhone` (`numberPhone` ASC) VISIBLE,
  INDEX `fk_phones_users1_idx` (`fkUSer` ASC) VISIBLE,
  CONSTRAINT `fk_phones_users1`
    FOREIGN KEY (`fkUSer`)
    REFERENCES `ticketsdb`.`users` (`idUser`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`tickets`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`tickets` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`tickets` (
  `idTicket` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dateInitial` TIMESTAMP(3) NOT NULL,
  `dateClose` TIMESTAMP(3) NULL DEFAULT NULL,
  `ticketType` INT UNSIGNED NOT NULL DEFAULT '1',
  `subject` VARCHAR(50) NOT NULL,
  `description` TEXT NOT NULL,
  `status` ENUM('OPEN', 'IN PROGRESS', 'PENDING COSTUMER', 'PENDING AGENT', 'SOLVED', 'CLOSED', 'REQUEST FOR REOPENING', 'REOPENING') NULL DEFAULT 'OPEN',
  `fkArea` INT UNSIGNED NOT NULL,
  `fkCategory` INT NOT NULL,
  `fkUser` INT UNSIGNED NOT NULL,
  `fkAgent` INT UNSIGNED NOT NULL,
  `dateUpdate` TIMESTAMP(3) NULL DEFAULT NULL,
  `guidMessages` VARCHAR(30) NULL DEFAULT NULL,
  `Priority` ENUM('HIGH', 'LOW', 'NORMAL', 'URGENT') NULL DEFAULT NULL,
  PRIMARY KEY (`idTicket`),
  UNIQUE INDEX `idTicket_UNIQUE` (`idTicket` ASC) VISIBLE,
  INDEX `fk_tickets_area1_idx` (`fkArea` ASC) VISIBLE,
  INDEX `fk_tickets_category1_idx` (`fkCategory` ASC) VISIBLE,
  INDEX `fk_tickets_users1_idx` (`fkUser` ASC) VISIBLE,
  INDEX `fk_tickets_agents1_idx` (`fkAgent` ASC) VISIBLE,
  CONSTRAINT `fk_tickets_agents1`
    FOREIGN KEY (`fkAgent`)
    REFERENCES `ticketsdb`.`agents` (`idAgent`),
  CONSTRAINT `fk_tickets_area1`
    FOREIGN KEY (`fkArea`)
    REFERENCES `ticketsdb`.`area` (`idArea`),
  CONSTRAINT `fk_tickets_category1`
    FOREIGN KEY (`fkCategory`)
    REFERENCES `ticketsdb`.`category` (`idCategory`),
  CONSTRAINT `fk_tickets_users1`
    FOREIGN KEY (`fkUser`)
    REFERENCES `ticketsdb`.`users` (`idUser`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`reassignments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`reassignments` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`reassignments` (
  `idReassignment` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `status` ENUM('PENDING', 'PASS', 'REJECT') NOT NULL DEFAULT 'PENDING',
  `comments` TEXT NOT NULL,
  `dateRequest` TIMESTAMP(3) NOT NULL,
  `dateResponse` TIMESTAMP(3) NULL DEFAULT NULL,
  `fkAgentProvider` INT UNSIGNED NOT NULL,
  `fkTicket` INT UNSIGNED NOT NULL,
  `fkAgentReciver` INT UNSIGNED NOT NULL,
  `fkResponsible` INT NOT NULL,
  `commentsResponsible` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`idReassignment`),
  INDEX `fk_reassignments_agents1_idx` (`fkAgentProvider` ASC) VISIBLE,
  INDEX `fk_reassignments_tickets1_idx` (`fkTicket` ASC) VISIBLE,
  INDEX `fk_reassignments_agents2_idx` (`fkAgentReciver` ASC) VISIBLE,
  CONSTRAINT `fk_reassignments_agents1`
    FOREIGN KEY (`fkAgentProvider`)
    REFERENCES `ticketsdb`.`agents` (`idAgent`),
  CONSTRAINT `fk_reassignments_agents2`
    FOREIGN KEY (`fkAgentReciver`)
    REFERENCES `ticketsdb`.`agents` (`idAgent`),
  CONSTRAINT `fk_reassignments_tickets1`
    FOREIGN KEY (`fkTicket`)
    REFERENCES `ticketsdb`.`tickets` (`idTicket`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `ticketsdb`.`reoppeningticket`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsdb`.`reoppeningticket` ;

CREATE TABLE IF NOT EXISTS `ticketsdb`.`reoppeningticket` (
  `idReoppening` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `comments` TEXT NOT NULL,
  `status` ENUM('PENDING', 'PASS', 'REJECT') NULL DEFAULT 'PENDING',
  `dateInitial` TIMESTAMP(3) NOT NULL,
  `dateClose` TIMESTAMP(3) NULL DEFAULT NULL,
  `fkTicket` INT UNSIGNED NOT NULL,
  `fkAgent` INT UNSIGNED NOT NULL,
  `fkAdmin` INT UNSIGNED NOT NULL,
  `AdminComments` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`idReoppening`),
  INDEX `fk_reoppeningTicket_tickets1_idx` (`fkTicket` ASC) VISIBLE,
  INDEX `fk_reoppeningTicket_agents1_idx` (`fkAgent` ASC) VISIBLE,
  INDEX `fk_reoppeningTicket_agents2_idx` (`fkAdmin` ASC) VISIBLE,
  CONSTRAINT `fk_reoppeningTicket_agents1`
    FOREIGN KEY (`fkAgent`)
    REFERENCES `ticketsdb`.`agents` (`idAgent`),
  CONSTRAINT `fk_reoppeningTicket_agents2`
    FOREIGN KEY (`fkAdmin`)
    REFERENCES `ticketsdb`.`agents` (`idAgent`),
  CONSTRAINT `fk_reoppeningTicket_tickets1`
    FOREIGN KEY (`fkTicket`)
    REFERENCES `ticketsdb`.`tickets` (`idTicket`))
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb3;

USE `ticketsdb` ;

-- -----------------------------------------------------
-- procedure InConsumer
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`InConsumer`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `InConsumer`(IN nameConsumer varchar(50), IN emailConsumer varchar(40), IN passwordConsumer varchar(70))
BEGIN
DECLARE msg TEXT; 
DECLARE errno int;
DECLARE exit HANDLER FOR SQLEXCEPTION   
BEGIN
GET current diagnostics condition 1
msg = message_text, errno= mysql_errno;
-- ERROR 
SELECT errno AS NO_ERROR , msg AS MESSAGE;
ROLLBACK;
END;

START TRANSACTION;
INSERT INTO users (fkUserType,email) VALUES (1,emailConsumer);
INSERT INTO consumers (nameConsumer, emailConsumer, fkUser, passwordConsumer) values (nameConsumer, emailConsumer ,last_insert_id(),passwordConsumer);
SELECT last_insert_id() AS IdConsumer;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InEmploye
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`InEmploye`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `InEmploye`(IN userName varchar(15), IN nameEmploye Varchar(50), IN emailEmploye varchar(40),IN numberEmploye VARCHAR (10), passwordEmploye varchar(70), IN rol int, IN titleJob varchar(30))
BEGIN
DECLARE msg TEXT;
DECLARE errno INT;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET current diagnostics condition 1
msg = message_text, errno=mysql_errno ;
-- ERROR 
SELECT errno AS NO_ERROR, msg AS MESSAGE;
ROLLBACK;
END;
START transaction;
INSERT INTO users (fkUserType,email) VALUES (2,emailEmploye);
INSERT INTO employes (userName, nameEmploye, emailEmploye, numberEmploye, passwordEmploye, fkUser, fkRole, jobTitle) values (userName,nameEmploye, emailEmploye,numberEmploye,passwordEmploye ,last_insert_id(), rol, titleJob);
SELECT last_insert_id() AS IdEmploye;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InTicket
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`InTicket`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `InTicket`(IN DateTicket timestamp(3),IN subjectTicket varchar(50) ,IN descriptionTicket text, IN areaFk INT UNSIGNED, IN categoryFk INT ,IN userFK  INT UNSIGNED,IN agentFk INT UNSIGNED, IN initialPrority INT)
BEGIN 
DECLARE msg TEXT; 
DECLARE errno int;
DECLARE exit HANDLER FOR SQLEXCEPTION   
BEGIN
GET current diagnostics condition 1
msg = message_text, errno= mysql_errno;
-- ERROR 
SELECT errno AS NO_ERROR , msg AS MESSAGE;
ROLLBACK;
END;

START TRANSACTION;
INSERT INTO tickets(dateInitial,subject,description,fkArea,fkCategory,fkUser,fkAgent,Priority,dateUpdate) 
VALUES (DateTicket,subjectTicket,descriptionTicket,areaFk,categoryFk,userFk,agentFK,initialPrority,DateTicket);
SELECT last_insert_id() AS NewIdTicket;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ReassignmentRequest
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`ReassignmentRequest`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ReassignmentRequest`(IN commentsRe text, IN requestDate timestamp(3),IN agentProvider INT unsigned, IN ticketId INT unsigned, IN agentReciver INT unsigned)
BEGIN
DECLARE msg TEXT; 
DECLARE errno int;
DECLARE idArea int;
DECLARE Agent int;
DECLARE exit HANDLER FOR SQLEXCEPTION   
BEGIN
GET current diagnostics condition 1
msg = message_text, errno= mysql_errno;
-- ERROR 
SELECT errno AS NO_ERROR , msg AS MESSAGE;
ROLLBACK;
END;
START TRANSACTION;
SELECT fkArea into idArea from tickets WHERE idTicket = ticketId;
SELECT idAgent into Agent from agents WHERE rangeAgent =1 AND fkArea=idArea;
INSERT INTO reassignments(comments,dateRequest,fkAgentProvider,fkTicket,fkAgentReciver,fkResponsible) VALUES(commentsRe,requestDate,agentProvider,ticketId,agentReciver,Agent);
SELECT * FROM reassignments;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ReassignmentUpdate
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`ReassignmentUpdate`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ReassignmentUpdate`(IN comments text ,IN statusIn int unsigned ,in responseDate timestamp(3), IN reassignmentId int)
BEGIN
DECLARE msg TEXT; 
DECLARE errno int;
DECLARE idArea int;
DECLARE Agent int;
DECLARE exit HANDLER FOR SQLEXCEPTION   
BEGIN
GET current diagnostics condition 1
msg = message_text, errno= mysql_errno;
-- ERROR 
SELECT errno AS NO_ERROR , msg AS MESSAGE;
ROLLBACK;
END;
START TRANSACTION;
if statusIn > 0 AND statusIn < 3 then
UPDATE reassignments SET status= statusIn, commentsResponsible=comments, dateResponse=responseDate WHERE idReassignment=reassignmentId;
UPDATE tickets SET dateUpdate=responseDate, fkAgent=(SELECT fkAgentReciver FROM reassignments WHERE idReassignment=reassignmentId) WHERE idTicket=(SELECT fkTicket FROM reassignments WHERE idReassignment=reassignmentId);
ELSE
UPDATE reassignments SET status= statusIn, commentsResponsible=comments, dateResponse=responseDate WHERE idReassignment=reassignmentId;
end if;
SELECT * FROM reassignments WHERE idReassignment=reassignmentId;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ReoppeningUpdate
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`ReoppeningUpdate`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ReoppeningUpdate`(
IN ReoppeningID INT,
IN statusFinal INT,
IN Closedate timestamp(3),
IN comments text)
BEGIN
DECLARE msg TEXT; 
DECLARE errno int;
DECLARE exit HANDLER FOR SQLEXCEPTION   
BEGIN
GET current diagnostics condition 1
msg = message_text, errno= mysql_errno;
-- ERROR 
SELECT errno AS NO_ERROR , msg AS MESSAGE;
ROLLBACK;
END;
START TRANSACTION;
IF statusFinal > 1 AND statusFinal < 3 THEN
UPDATE reoppeningticket SET status=statusFinal, AdminComments=comments, dateClose=Closedate WHERE idReoppening=ReoppeningID;
UPDATE tickets SET status=8 WHERE idTIcket=(SELECT fkTicket FROM reoppeningticket WHERE idReoppening=ReoppeningID);
END IF;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateConsumer
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`UpdateConsumer`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateConsumer`(IN consumerName varchar(50), IN consumerEmail varchar(40),IN consumerPassword varchar(70) ,IN consumerId int)
BEGIN
DECLARE msg TEXT;
DECLARE errno int;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
GET current diagnostics condition 1
msg = message_text, errno = mysql_errno; 
-- ERROR 
SELECT errno AS NO_ERROE, msg AS MESSAGE;
ROLLBACK;
END;
START TRANSACTION;
UPDATE users SET email=consumerEmail WHERE idUser=(SELECT fkUser FROM consumers WHERE idConsumer=consumerId);
UPDATE consumers SET nameConsumer=consumerName, emailConsumer=consumerEmail, passwordConsumer=consumerPassword WHERE idConsumer=consumerId;
SELECT * FROM consumers WHERE idConsumer=consumerId;
commit;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateEmploye
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`UpdateEmploye`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateEmploye`(IN EmployeId int, IN UnameUser varchar(15), IN UnameEmploye varchar(50), IN UemailEmploye varchar(40), IN UpasswordEmploye varchar(70), IN UfkRole int)
BEGIN
DECLARE msg text;
DECLARE errno int;
DECLARE EXIT HANDLER FOR SQLEXCEPTION 
BEGIN
GET CURRENT DIAGNOSTICS condition 1
msg = message_text, errno = MYSQL_ERRNO; 
SELECT errno AS NO_ERROR, msg AS ERRO_MESSAGE;
ROLLBACK;
END;
START TRANSACTION;
UPDATE users SET email=UemailEmploye WHERE idUser=(SELECT fkUser FROM employes WHERE idemploye=EmployeId);
UPDATE employes SET userName=UnameUser, nameEmploye=UnameEmploye, emailEmploye=UemailEmploye, passwordEmploye=UpasswordEmploye, fkRole=UfkRole WHERE idemploye=EmployeId;
SELECT * FROM employes WHERE idemploye=EmployeId;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reoppeningRequest
-- -----------------------------------------------------

USE `ticketsdb`;
DROP procedure IF EXISTS `ticketsdb`.`reoppeningRequest`;

DELIMITER $$
USE `ticketsdb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `reoppeningRequest`(IN commentsIn text, in requestDate timestamp(3),IN ticketId INT, IN agentID INT)
BEGIN
DECLARE msg TEXT; 
DECLARE errno int;
DECLARE AdminID int;
DECLARE idArea int;
DECLARE exit HANDLER FOR SQLEXCEPTION   
BEGIN
GET current diagnostics condition 1
msg = message_text, errno= mysql_errno;
-- ERROR 
SELECT errno AS NO_ERROR , msg AS MESSAGE;
ROLLBACK;
END;
START TRANSACTION;
SELECT fkArea into idArea from tickets WHERE idTicket = ticketId;
SELECT idAgent into AdminID from agents WHERE rangeAgent =1 AND fkArea=idArea;
INSERT INTO reoppeningticket(comments,dateInitial,fkTicket,fkAgent,fkAdmin) VALUES (commentsIn,requestDate,ticketId,agentID,AdminID);
SELECT * FROM reoppeningticket;
COMMIT;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
